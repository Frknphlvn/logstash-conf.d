
filter {
	if [source_service] == "apache_access" {
	  json {       
	  source => "message"
               }

	## grok {  
	    ##  match => [  
	    ##  "message" , "%{COMBINEDAPACHELOG}+%{GREEDYDATA:extra_fields}",  
	    ##  "message" , "%{COMMONAPACHELOG}+%{GREEDYDATA:extra_fields}"  
	    ##  ]  
	    ##  overwrite => [ "message" ]  
	  ## }  
	    mutate {  
	      convert => ["response", "integer"]  
	      convert => ["bytes", "integer"]  
	      convert => ["responsetime", "float"]  
	    }  
		date {
           match => [ "time", "[dd/MMM/yyyy:HH:mm:ss +0300]" ]
	   timezone => ["Europe/Istanbul"]
	   target => "@timestamp"
         }

        if [clientip] {
          cidr {
             add_tag => [ "private_ip" ]
             address => [ "%{clientip}" ]
             network => [ "0.0.0.0/32", "10.0.0.0/8", "172.16.0.0/12", "192.168.0.0/16", "fc00::/7", "127.0.0.0/8", "::1/128", "169.254.0.0/16", "fe80::/10","224.0.0.0/4", "ff00::/8","255.255.255.255/32", "::" ]
          }
          if "private_ip" not in [tags] {
             mutate {
                add_tag => [ "public_ip" ]
             }
            geoip {
              source => "clientip"
              #database => "/etc/logstash/GeoIP/GeoLite2-City.mmdb"
              target => "[client][geo]"
            }
            geoip {
              default_database_type => 'ASN'
              #database => "/etc/logstash/GeoIP/GeoLite2-ASN.mmdb"
              #cache_size => 5000
              source => "clientip"
              target => "[client][as]"
            }
            mutate {
              rename => { "[client][as][asn]" => "[client][as][number]"}
              rename => { "[client][as][as_org]" => "[client][as][organization][name]"}
              rename => { "[client][geo][country_code2]" => "[client][geo][country_iso_code]"}
              rename => { "[client][geo][region_code]" => "[client][geo][region_iso_code]"}
	            add_tag => [ "apache-geoip" ]
            }
          }
        }
        if "beats_input_codec_plain_applied" in [tags] {
            mutate {
                remove_tag => ["beats_input_codec_plain_applied"]
            }
        }
	    date {  
	      match => [ "timestamp" , "dd/MMM/YYYY:HH:mm:ss Z" ]  
          remove_field => [ "timestamp" ]  
	    }  
	    useragent {  
	      source => "user_agent"
	    }
	}
	if [source_service] == "apache_error" {
	json {
            source => "message"
          }
         
	 ##  grok {  
	 ##     match => ["message", "\[%{WORD:dayname} %{WORD:month} %{DATA:day} %{DATA:hour}:%{DATA:minute}:%{DATA:second} %{YEAR:year}\] \[%{NOTSPACE:loglevel}\] (?:\[client %{IPORHOST:clientip}\] ){0,1}%{GREEDYDATA:message}"]  
	 ##     overwrite => [ "message" ]  
	 ##  }  
	   mutate  
	   {  
	      add_field =>  
	      {  
	         "time_stamp" => "%{day}/%{month}/%{year}:%{hour}:%{minute}:%{second}"  
	      }  
	   }  
	   date {  
	      match => ["time_stamp", "dd/MMM/YYYY:HH:mm:ss"]  
	      remove_field => [ "time_stamp","day","dayname","month","hour","minute","second","year"]  
	   }
        if [clientip] {
          cidr {
             add_tag => [ "private_ip" ]
             address => [ "%{clientip}" ]
             network => [ "0.0.0.0/32", "10.0.0.0/8", "172.16.0.0/12", "192.168.0.0/16", "fc00::/7", "127.0.0.0/8", "::1/128", "169.254.0.0/16", "fe80::/10","224.0.0.0/4", "ff00::/8","255.255.255.255/32", "::" ]
          }
          if "private_ip" not in [tags] {
             mutate {
                add_tag => [ "public_ip" ]
             }
            geoip {
              source => "clientip"
              #database => "/etc/logstash/GeoIP/GeoLite2-City.mmdb"
              target => "[client][geo]"
            }
            geoip {
              default_database_type => 'ASN'
              #database => "/etc/logstash/GeoIP/GeoLite2-ASN.mmdb"
              #cache_size => 5000
              source => "clientip"
              target => "[client][as]"
            }
            mutate {
              rename => { "[client][as][asn]" => "[client][as][number]"}
              rename => { "[client][as][as_org]" => "[client][as][organization][name]"}
              rename => { "[client][geo][country_code2]" => "[client][geo][country_iso_code]"}
              rename => { "[client][geo][region_code]" => "[client][geo][region_iso_code]"}
	            add_tag => [ "apache-geoip" ]
            }
          }
        }
        if "beats_input_codec_plain_applied" in [tags] {
            mutate {
                remove_tag => ["beats_input_codec_plain_applied"]
            }
        }
            useragent {
              source => "user_agent"
            }

	}
}  

output {
	if [source_service] == "apache_access" {  
	    elasticsearch {  
	    hosts => ["http://localhost:9200"]
            index => "logstash-apache_access-%{+yyyy.MM.dd}"  
                }
	}
	
	if [source_service] == "apache_error" {  
	    elasticsearch {  
	     hosts => ["http://localhost:9200"]  
	     index => "logstash-apache_error-%{+yyyy.MM.dd}"	
	   }
	}
}
