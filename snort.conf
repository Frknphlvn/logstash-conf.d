filter {
  if [source_service] == "snort" {
    json {
      source => "message"
    }
    mutate {
      convert => {
        "src_port" => "integer"
        "dst_port" => "integer"
        "priority" => "integer"
        "msg" => "string"
        "pkt_len" => "integer"
      }
      gsub => ["timestamp", "\d{3}$", ""]
    }
    ruby {
        code => "
            tobase64fields = ['b64_data']
            if event.get('b64_data')
            event.set('data', Base64.decode64(event.get('b64_data')))
            end
        "
    }
    mutate {
        remove_field => [ "b64_data" ]
    }
    date {
       match => [ "timestamp" , "dd/MMM/yyyy:HH:mm:ss Z" ]
      #match => [ "timestamp", "MM/dd-HH:mm:ss.SSSSSS" ]
      #match => [ "timestamp", "MM/dd-HH:mm:ss.SSSSSS", "MM/dd/yy-HH:mm:ss.SSSSSS", "EEE MMM d HH:mm:ss yyyy", "MMM  d HH:mm:ss", "MMM dd HH:mm:ss", "MMM dd yyyy HH:mm:ss", "MMM  d yyyy HH:mm:ss", "ISO8601", "yyyy-MM-dd HH:mm:ss.SSSSSS", "MMM dd HH:mm:ss yyyy", "MMM  d HH:mm:ss yyyy" ]
    }
    if [src_addr] {
      cidr {
         add_tag => [ "src_private" ]
         address => [ "%{src_addr}" ]
         network => [ "0.0.0.0/32", "10.0.0.0/8", "172.16.0.0/12", "192.168.0.0/16", "fc00::/7", "127.0.0.0/8", "::1/128", "169.254.0.0/16", "fe80::/10","224.0.0.0/4", "ff00::/8","255.255.255.255/32", "::" ]
      }
      if "src_private" not in [tags] {
         mutate {
            add_tag => [ "src_public" ]
         }
        geoip {
          source => "src_addr"
          #database => "/etc/logstash/GeoIP/GeoLite2-City.mmdb"
          target => "[src][geo]"
        }
        geoip {
          default_database_type => 'ASN'
          #database => "/etc/logstash/GeoIP/GeoLite2-ASN.mmdb"
          #cache_size => 5000
          source => "src_addr"
          target => "[src][as]"
        }
        mutate {
          rename => { "[src][as][asn]" => "[src][as][number]"}
          rename => { "[src][as][as_org]" => "[src][as][organization][name]"}
          rename => { "[src][geo][country_code2]" => "[src][geo][country_iso_code]"}
          rename => { "[src][geo][region_code]" => "[src][geo][region_iso_code]"}
        }
      }
    }
    if [dst_addr] {
      cidr {
         add_tag => [ "dst_private" ]
         address => [ "%{dst_addr}" ]
         network => [ "0.0.0.0/32", "10.0.0.0/8", "172.16.0.0/12", "192.168.0.0/16", "fc00::/7", "127.0.0.0/8", "::1/128", "169.254.0.0/16", "fe80::/10","224.0.0.0/4", "ff00::/8","255.255.255.255/32", "::" ]
      }
      if "dst_private" not in [tags] {
         mutate {
            add_tag => [ "dst_public" ]
         }
        geoip {
          source => "dst_addr"
          #database => "/etc/logstash/GeoIP/GeoLite2-City.mmdb"
          target => "[dst][geo]"
        }
        geoip {
          default_database_type => 'ASN'
          #database => "/etc/logstash/GeoIP/GeoLite2-ASN.mmdb"
          #cache_size => 5000
          source => "dst_addr"
          target => "[dst][as]"
        }
        mutate {
          rename => { "[dst][as][asn]" => "[dst][as][number]"}
          rename => { "[dst][as][as_org]" => "[dst][as][organization][name]"}
          rename => { "[dst][geo][country_code2]" => "[dst][geo][country_iso_code]"}
          rename => { "[dst][geo][region_code]" => "[dst][geo][region_iso_code]"}
        }
      }
    }
    if "beats_input_codec_plain_applied" in [tags] {
        mutate {
            remove_tag => ["beats_input_codec_plain_applied"]
        }
    }
  }
}

output {
    if [source_service] == "snort" {
       elasticsearch {
        hosts => "http://localhost:9200"
        index => "logstash-snort-%{+YYYY.MM.dd}"
      }
    }
}

